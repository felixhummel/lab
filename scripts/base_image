# vim: set ft=sh :

# set thi
pubkey=$(readlink -m ~/.ssh/id_rsa.pub)

pubkey=$pubkey sudo -H $SHELL

# check prerequisites
hash virsh
hash debootstrap
hash chroot

[[ -f $pubkey ]]

vg=ssd
pool=lab

name=debian9
vol=$name
dev=/dev/$vg/$vol
target=/tmp/target

# cleanup DANGER! DESTRUCTIVE! :>
virsh undefine debian9

virsh pool-info $pool
virsh vol-list --pool $pool
virsh vol-delete --pool $pool $vol

# again
virsh vol-create-as --pool $pool --format raw --capacity 20G --name $vol

echo $dev
mkfs.ext4 $dev

# caching \o/
wajig install apt-cacher-ng
netstat -pant | grep 3142
tail -f /var/log/apt-cacher-ng/apt-cacher.*

# Install Debian
# ==============
echo $target
mkdir $target

mount $dev $target
df $target

release=stretch
# note: different arch? cross compile: a different story.
arch=amd64
kernel_package=linux-image-amd64
# comma-separated
include=$kernel_package,acpi-support,bash-completion,htop,net-tools,openssh-server,vim-nox,dnsutils

http_proxy=http://localhost:3142 debootstrap \
  --include=$include \
  --arch $arch \
  $release \
  $target

# Kernel time!
extra_mount() {
  mount -t proc proc ${target}/proc  # for bash completion
  mount --bind /dev ${target}/dev
  mount -t sysfs sysfs ${target}/sys
}
extra_umount() {
  umount ${target}/proc
  umount ${target}/dev
  umount ${target}/sys
}

extra_mount
KERNELS_BASE_DIR=/var/lib/libvirt/kernels
kernels=$KERNELS_BASE_DIR/$name
mkdir -p $kernels
cp $target/boot/vmlinuz* $kernels/
kernel_name=$(basename $target/boot/vmlinuz*)
kernel_host_path=$kernels/$kernel_name
cp $target/boot/initrd.img* $kernels/
initrd_name=$(basename $target/boot/initrd.img*)
initrd_host_path=$kernels/$initrd_name
chown -R libvirt-qemu: $kernels/
DEBIAN_FRONTEND=noninteractive chroot $target apt-get purge --yes $kernel_package
extra_umount

# prep test-run
# =============

# virsh network
virsh net-list --all
virsh net-define files/networks/lab1.xml
virsh net-autostart lab1
virsh net-start lab1

UUID=$(blkid -o export $dev | grep ^UUID | cut -d= -f2)
cat <<EOF > $target/etc/fstab
UUID=$UUID /               ext4    errors=remount-ro 0       1
EOF

echo $name > $target/etc/hostname
cat <<'EOF' > $target/etc/network/interfaces
# interfaces(5) file used by ifup(8) and ifdown(8)
# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d

auto lo
iface lo inet loopback

auto ens3
iface ens3 inet dhcp
EOF

mv $target/etc/ssh/sshd_config $target/etc/ssh/sshd_config.orig
cat <<'EOF' > $target/etc/ssh/sshd_config
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
AcceptEnv LANG LC_*
Subsystem sftp  /usr/lib/openssh/sftp-server
PermitRootLogin without-password
EOF
(umask 077 && mkdir -p $target/root/.ssh && touch $target/root/.ssh/authorized_keys)
cat $pubkey >> $target/root/.ssh/authorized_keys

umount $target

echo XML snippet:
cat <<EOF
    <kernel>$kernel_host_path</kernel>
    <initrd>$initrd_host_path</initrd>
    <cmdline>root=UUID=$UUID ro console=ttyS0</cmdline>
EOF

exit  # sudo -i


# configure and create machine
vi files/debian9.xml  # xml snippet for domain > os
virsh define files/debian9.xml
virsh start debian9

# ssh \o/
virsh net-dhcp-leases lab1
ip=$(dig @10.12.1.1 +short $name)
ssh root@$ip
